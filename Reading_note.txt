2015. 01. 30 (금)
< 전문가를 위한 C++ >
 100p ~ 110p

2.1 프로그램 디자인 (소프트웨어 디자인)
  1. 서브시스템과 서브시스템의 종속성 및 인터페이스, 데이터 흐름, 입출력, 스레드 활용 모델 설명 파트
  2. 상세 사항, 클래스 구성 및 계층, 데이터 구조, 알고리즘, 개별 스래드 활용 모델 에러 처리 방법
    - Spiral Method(나선형 개발 모델) - 요구 분석, 디자인, 구현 단계를 반복 순회하며 점진적으로 완성하는 디자인 방법 *23장

2.2 프로그램 디자인의 중요성
  대부분 대충 코딩부터 시작함 -> 100% 문제 발생
  (설계없이 집 짓는 건설업자 이야기 -> 싱크대, 배관 문제 억지로 해결 -> 내코드같음--)
  (체스게임 개발 이야기 -> 재사용 가능한 부분에 초점을 맞추지 못함)

2.3 C++ 디자인의 특징
  1. 기능이 방대하다. 언어 자체의 크기가 압도적이라서 작업이 벅차다
  2. OOP이다. 클래스계층, 인터페이스, 객체간 연동 등이 고려된다.
  3. 공용 코드 및 재사용 코드를 설계가능하다.(템플릿, 상속, 연산자 오버라이딩 등)
  4. 유용한 표준 라이브러리를 제공한다.
  5. 적용가능한 디자인 패턴이나 공통적인 문제 해결 방식이 많이 존재한다.

  * 디자인이 제자리를 맴돌때 -> 도움요청, 잠깐 다른거 하기, 일단 결정내리고 다음으로 넘어간다!

2.4 C++ 디자인의 두 가지 원칙
  추상화 
    - (TV의 예) 어떻게 구현된지는 알필요가 없다. 인터페이스와 구현이 완전히 분리된 것을 뜻함. 협업상의 장점 존재

  재사용
    - (제빵사 이야기) 
    체스판을 보드게임 판으로 구현하면 바둑 등 2차원 보드 게임에 모두 적용가능 -> 일반화의 중요성
    싱글톤 디자인 기법 *28장 29장

< 문제로 풀어보는 알고리즘 >
199p ~208p

05. 게임
  1.동전 놓기
    원판 위에 두 사람이 차례로 동전을 올려놓는다. 겹치게 x 원판 밖으로 일부가 나가게 x 더이상 못 놓는 사람이 패자

    < 먼저 내려놓는 사람의 필승전략 >
    맨 처음 한 가운데에 둔다. -> 이후 두 번째 두는 사람의 점대칭 지점에 놓는다.(항상 점대칭 지점에 공간이 있음)
    ex) 흉내바둑
    -> 이것이 winning strategy

  2.동전 가져가기
    동전 40개. A,B가 교대로 가져가되 하나 이상 5개 이하를 가져간다. 마지막을 가져가면 이긴다.

    < A의 필승전략 >
      처음에 4개를 가져가고 다음 부터는 6 - B를 가져가면 이긴다.

      생각해보기 - 프로그램 짜봐라 -> 컴퓨터가 A의 전략을 사용하게 코딩..ㅎㅎ
      생각해보기 - 하나 ~ 3개이하의 동전을 가져갈 수 있다면 필승전략은? 처음에 1개 가져가서 3의 배수 만들고 3-B를 하면 되지않을까

    두 개의 접시에서 가져가기
      20, 30개 있음, A,B 교대로 가져감, 하나 이상 원하는 만큼, 단 접시 섞어서는 못가져감

    < A의 필승전략 >
      A가 먼저 30개에서 10개를 가져감
      다음 부턴 B만큼 가져감
      항상 양쪽접시에 남은 양이 같음 ->(3,3 남고 B가 3가져가면 따라서 3가져가면서 A승)

  Nim Game
    - 유한 개의 물체가 있는 유한 개의 더미에서 시작하여 두 사람이 한 번에 한 더미에서 물체들을 제거해 나가는 게임

4. 이길 수 있을까?

접시가 3개 - 동전이 3, 2, 1개 있음
두 사람이 교대로 가져간다
한 번에 한 접시에서 하나 이상 원하는 만큼 가져갈 수 있다
마지막에 가져가면 이긴다.
잘몰라 대리가 먼저 가져간다.
(Nim Game)

-> 동전 가져가기 게임(Nim Game)의 일반적인 분석
1,0,0
2,0,0  - 이 때 내 차례면 승리함
3,0,0

1,1,0 - 이 때 내 차례면 짐

-> 이길 수 있는 방법이 있거나 아예 지는 경우를 나눠서 다이어그램으로 표현

2,2,0 -> 이길 수 없음 -> 내가 가져가면 2,1,0 혹은 2,0,0이 되는데 상대방의 힘으로 이길 수 있는 경우들.


3,2,1 -> 이길 수 없음 -> 어떻게 해도 짐

생각해보기 - 동전이 4,2,2 -> 경우의 수가 늘어남.... 현재로썬 다 그려보는 수 밖에.
생각해보기 - 배치도는 그래프이다. 이 그래프에 사이클은 없는가?

